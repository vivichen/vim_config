""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 学习设定 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" imap只在insert模式中生效，c-d 表示ctrl+d，ese使其退出到normal模式，
" ddi表示删除一行后又回到insert模式
inoremap <c-d> <esc>ddi
" 在行末加冒号，for python
nnoremap ;; $a;
inoremap ;; <esc>$a;
nnoremap :: $a:
inoremap :: <esc>$a:
" press space选中单词
nnoremap <leader><space> *
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
"why don't work
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>H ^
nnoremap <leader>L $
"why don't work 
inoremap jk <esc>l
inoremap jkl; <esc>f)a;
" some operator-pending mappings
"di' - Delete the word enclosed by single quotes.
onoremap p i(
onoremap b i}
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
" for markdown 
onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
onoremap ihh :<c-u>execute "normal! ?^--\\+$\r:nohlsearch\rkvg_"<cr>

iabbrev @@ amanachen@tencent.com
" Vimscript file settings ---------------------- {{{
"为vim脚本设置自动折叠选项
 augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
 " }}}
" python file settings ---------------------- {{{
augroup filetype_python
	autocmd!
	autocmd FileType python nnoremap <leader>c I#
augroup END
" }}}
"cpp file settings ---------------------- {{{
augroup filetype_cpp 
	autocmd!
	" autocmd BufWritePre,BufRead *.cpp,*.h,*.cc  :normal gg=G
	autocmd FileType cpp nnoremap <leader>c I//
	autocmd FileType cpp :iabbrev <buffer> iff if ()<left>
	autocmd FileType cpp :iabbrev <buffer> whii while ()<left>
	autocmd FileType cpp :iabbrev <buffer> foor for ()<left>
augroup EMD
 " }}}
" markdown file settings ---------------------- {{{
augroup filetype_markdown
	autocmd!
	autocmd FileType markdown nnoremap <leader>m :Voom markdown<CR> 
augroup END
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

" 不要使用vi的键盘模式，而是vim自己的 
set nocompatible 

" history文件中需要记录的行数 
set history=100 

" 在处理未保存或只读文件的时候，弹出确认 
set confirm 

" 与windows共享剪贴板 
set clipboard+=unnamed 
set nocp

" 保存全局变量 
set viminfo+=! 

" 高亮字符，让其不受100列限制 
:highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white 
:match OverLength '\%101v.*' 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 文件设置 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 不要备份文件（根据自己需要取舍） 
set nobackup 

" 不要生成swap文件，当buffer被丢弃的时候隐藏它 
"setlocal noswapfile 
"set bufhidden=hide 

" 字符间插入的像素行数目 
set linespace=0 

" 增强模式中的命令行自动完成操作 
set wildmenu 

" 命令行（在状态行下）的高度，默认为1，这里是2 
set cmdheight=1 

" 使回格键（backspace）正常处理indent, eol, start等 
set backspace=2 

" 允许backspace和光标键跨越行边界 
set whichwrap+=<,>,h,l 

" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） 
"set mouse=a 
"set selection=exclusive 
"set selectmode=mouse,key 

" 启动的时候不显示那个援助索马里儿童的提示 
set shortmess=atI 

" 通过使用: commands命令，告诉我们文件的哪一行被改变过 
set report=0 

" 不让vim发出讨厌的滴滴声 
set noerrorbells 

" 在被分割的窗口间显示空白，便于阅读 
set fillchars=vert:\ ,stl:\ ,stlnc:\ 

" 输入:set list命令是应该显示些啥？ 
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$ 

" 光标移动到buffer的顶部和底部时保持3行距离 
set scrolloff=3 

" 不要闪烁 
set novisualbell 

"""""""""""""""""""""""""""
"tagbar setting
"回车键      跳到光标所在的标记的定义处(如将光标移到main函数,按回车键)
"o      新建一个窗口,跳到标记定义处
"p      预览标记定义(仍然在tagbar g窗口)
"空格      在窗口的最下面显示标记的原型(如函数原型)
"u      更新标记列表(比如源文件新增了一个函数,并在保存后,可在tagbar g窗口按u)
"s      更改排序方式，在按名字排序和按出现顺序排序间切
"d
"删除光标所在的tagbar g文件(如用vi打开了两个文件f1.c,f2.c可以删除f1.c的标记)
"x      放大/缩小tagbar g窗口
"+      展开(指标记)
"-      折叠
"*      全部展开
"=      全部折叠
"[[      将光标移到前一个文件的起点
"]]      将光标移到后一个文件的起点
"q      退出tagbar g窗口
"""""""""""""""""""""""""""
""if you want to open it only if you're opening Vim with a supported file/files
autocmd VimEnter * nested :call tagbar#autoopen(1)
nmap <silent> <F7> :TagbarToggle<CR>
if has("win32")     
    let g:tagbar_ctags_bin = "$VIM/vim73/ctags.exe"
else   
	let g:tagbar_ctags_bin = '/usr/bin/ctags'
endif     

let g:tagbar_width = 30
let g:tagbar_left = 1
let g:tagbar_sort = 0
"""""""""""""""""""""""""""
"for ctags & cscope
"0 或 s 查找本 C 符号(可以跳过注释)
"1 或 g 查找本定义
"2 或 d 查找本函数调用的函数
"3 或 c 查找调用本函数的函数
"4 或 t 查找本字符串
"6 或 e 查找本 egrep 模式
"7 或 f 查找本文件
"8 或 i 查找包含本文件的文件
"""""""""""""""""""""""""""
if(has("win32") || has("win95") || has("win64") || has("win16"))
	let g:vimrc_iswindows=1
else
	let g:vimrc_iswindows=0
endif
autocmd BufEnter * lcd %:p:h
" autocmd BufEnter * call AddTagsInCwdPath()
 nnoremap <leader>t :call AddTagsInCwdPath()

set cscopequickfix=s-,c-,d-,i-,t-,e-

map <F5> :call Do_CsTag()<CR>
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
function! Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
		let tagsdeleted=delete("./"."tags")
        if(tagsdeleted!=0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        let csfilesdeleted=delete("./"."cscope.files")
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        let csoutdeleted=delete("./"."cscope.out")
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
endfunction
